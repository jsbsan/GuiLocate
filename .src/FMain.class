' Gambas class file

Public DirectorioInicial As String

Public MiGrupoScroll As New GrupoScrollview

Private Ext_HojasDeCalculo As String[]
Private Ext_Documentos As String[]
Private Ext_Imagenes As String[]
Private Ext_pdf As String[]
Private Ext_libros As String[]
Private Ext_videos As String[]
Private Ext_musica As String[]
Private Ext_comprimidos As String[]
Private Ext_logs As String[]

Public Sub Form_Open()

  extensionesIniciales()

  'me pongo en el centro de la pantalla, parte superior
  Me.x = Screen.w / 2 - Me.w / 2
  Me.y = 0

  DirectorioInicial = Settings["DirectorioInicial", User.home]
  TextBoxBusqueda.SetFocus()

  MiGrupoScroll.add(ScrollViewLibreOfficeCalc, Ext_HojasDeCalculo, IconPanel1)
  MiGrupoScroll.add(scrollViewLibreOfficedoc, Ext_Documentos, IconPanel1)
  MiGrupoScroll.add(ScrollViewImagenes, Ext_Imagenes, IconPanel1)
  MiGrupoScroll.add(ScrollViewPDF, Ext_Pdf, IconPanel1)
  MiGrupoScroll.add(ScrollViewEPUB, Ext_Libros, IconPanel1)

  MiGrupoScroll.add(ScrollViewVideo, Ext_videos, IconPanel1)
  MiGrupoScroll.add(ScrollViewMusica, Ext_musica, IconPanel1)
  MiGrupoScroll.add(ScrollViewComprimido, Ext_comprimidos, IconPanel1)
  MiGrupoScroll.add(ScrollViewCarpetas, ["directory"], IconPanel1, "carpeta")
  MiGrupoScroll.add(ScrollViewLogs, Ext_logs, IconPanel1)

  'creo un grupo para meter los ficheros que  no cumplan las extensiones anteriores
  MiGrupoScroll.TabOtros(ScrollViewOtros, IconPanel1)

  Me.Title = Application.Name & " version " & Application.Version

End

Public Sub ButtonBuscar_Click()

  Dim linea As String

  Dim contenido As String
  Dim cadenas As String[]

  Dim buscarenocultas As Boolean = Settings["SwitchButtonBuscarCarpetasOcultas", True]
  Dim PalabraBuscada As String = Upper(TextBoxBusqueda.text)

  'buscamos con locate !!!
  Application.busy = 1
  Shell "locate -i '" & TextBoxBusqueda.text & "'" To contenido ''con el parametro -i ignoro mayusculas

  cadenas = Split(contenido, "\n")

  MiGrupoScroll.limpiar()

  'reviso las lineas que ha encontrado...

  For Each linea In cadenas

    If buscarenocultas = True Then
      If MiGrupoScroll.analisis(linea, PalabraBuscada) Then Continue
    Else
      If InStr(linea, "/.") = 0 Or InStr(linea, "/.directory") <> 0 Then
        If MiGrupoScroll.analisis(linea, PalabraBuscada) Then Continue
      Endif
    Endif

  Next

  MiGrupoScroll.actualizarNumero()
  Application.busy = 0

End

Public Function limpiezaContenedores(contenedor As ScrollView) As Container

  ' Dim lista As Variant[]
  ' Dim elemento As Variant[]
  Dim nombre As String
  Dim padre As Container

  nombre = contenedor.Name
  padre = contenedor.Parent

  contenedor.delete()

  contenedor = New ScrollView(padre)

  contenedor.name = nombre

  contenedor.Arrangement = Arrange.Vertical
  contenedor.Expand = True
  Return contenedor

End

Public Sub ButtonConfigurar_Click()

  Dim mensaje As New String[]

  FormConfigurar.mensaje = mensaje

  FormConfigurar.ShowModal()

  If mensaje.count > 0 And If mensaje[0] = "salir" Then
    'se ha actualizado la base de datos, tenemos que salir del programa
    Me.Close()
  Else
    'recarga configuracion...

    extensionesIniciales()
  Endif

End

Public Sub TextBoxBusqueda_KeyPress()

  If Key.code = Key.enter Or Key.code = Key.Return Then
    ButtonBuscar_Click()
  Endif

End

Public Sub agregar(c As Container, fichero As String, Optional tipologia As String)

  Dim hboxtmp As HBox
  Dim labeltmp As Label
  Dim botontmp As Button

  'creo un hbox en el contenedor

  hboxtmp = New HBox(c)
  ' hboxtmp.Expand = True
  hboxtmp.h = 20

  labeltmp = New Label(hboxtmp)
  'escribo el nombre del fichero, o el directorio de la carpeta
  If tipologia = "directorio" Then
    labeltmp.text = File.dir(fichero)
  Else

    labeltmp.text = File.Name(fichero)
  Endif

  labeltmp.Tooltip = File.Dir(fichero)

  labeltmp.Expand = True
  Labeltmp.h = 19
  Labeltmp.Border = Border.Plain

  botontmp = New Button(hboxtmp) As "Observador"
  botontmp.w = 25
  botontmp.h = 19
  botontmp.Picture = Picture["icon:/16/open"]

  If tipologia = "directorio" Then
    botontmp.tag = [File.dir(fichero), "directorio"] 'guarda el nombre del fichero
  Else
    botontmp.tag = [fichero, "fichero"] 'guarda el nombre del fichero
  Endif

End

Public Sub observador_click()

  ' Print Last.tag[0]

  If Last.tag[1] = "fichero" Then

    'es un fichero
    Desktop.Open(Last.tag[0])

  Else
    Shell ("thunar \"" & Last.tag[0] & "\"")
  Endif

End

Public Sub extensionesIniciales()

  Ext_HojasDeCalculo = Settings["HojasDeCalculo", ["ods", "xls", "csv"]]
  Ext_Documentos = Settings["Documentos", ["doc", "odt", "txt", "rtf", "pps", "ppt"]]
  Ext_Imagenes = Settings["Imagenes", ["png", "jpeg", "jpg", "tiff", "bmp", "ico", "svg"]]
  Ext_Pdf = Settings["Pdf", ["pdf"]]
  Ext_Libros = Settings["Libros", ["epub"]]
  Ext_Videos = Settings["Videos", ["mp4", "avi", "mov", "wmv", "mpeg", "mkv"]]
  Ext_Musica = Settings["Musica", ["mp3", "ogg", "wav"]]
  Ext_Comprimidos = Settings["Comprimidos", ["gz", "tar", "zip", "rar", "7z"]]
  Ext_Logs = Settings["Logs", ["log"]]

End
